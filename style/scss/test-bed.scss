

@import "library/global/colours";
@import "library/global/mixins";


/*------------------------------------
 #BUTTONS
 ------------------------------------*/

//
// This is the root style and SHOULD NOT be used directly
//
@mixin btn ($padding: 1em) {
  display: inline-block;
  padding: $padding;
}

@mixin btn-border ($padding: 1em, $border-width: 1px) {
  $total: length($padding);

  $values: ();

  @if $total == 1 { $values: (nth($padding, 1) - em-calc($border-width)); }
  @else {
    @for $i from 1 through $total {
      $new-pad: (nth($padding, $i) - em-calc($border-width));
      $values: append($values, $new-pad);
    }
  }

  @include btn($values);
}

//
// Button style mixins
// Mix these into style declarations to make them buttons
//
@mixin btn-positive ($padding: 1em) {
  @include btn($padding);
  background-color: colour(blue);
  color: $colour-white;

  &:hover {
    background-color: colour(blue, 'dark');
  }

}

@mixin btn-negative ($padding: 1em) {
  @include btn($padding);
  background-color: colour(grey, 'x-light');
  color: colour(grey, dark);

  &:hover {
    background-color: colour(grey, 'light');
  }

}

@mixin btn-neutral ($padding: 1em) {
  @include btn-border($padding, 1px);

  border: {
    color: colour(grey);
    style: solid;
    width:1px;
  }
  color: colour(grey, dark);

  &:hover {
    background-color: colour(grey, 'x-light');
    border-color: colour(grey, 'x-light');
  }
}


/**
 * Core decorator class names
 * These class names can be added to HTML elements to make them buttons
 * NOTE: It is better to mixin the styles
 */
.btn-positive {
  @include btn-positive;
}
.btn-negative {
  @include btn-negative;
}
.btn-neutral {
  @include btn-neutral;
}


/*------------------------------------
 #EXAMPLES
 ------------------------------------*/
.my-button-positive {
  @include btn-positive;
}
.my-button-negative {
  @include btn-negative;
}
.my-button-neutral {
  @include btn-neutral(1em 0.5em);
}
